#! /usr/bin/env python

################################################################################
#
# Script for running Helac-Onia on the cluster
#
################################################################################
"""This is the main executable, a simple frontend to set up the PYTHONPATH
and call immediately the command line interface scripts"""

import sys
if not sys.version_info[0] == 2 or sys.version_info[1] < 6:
    sys.exit('Helac-Onia cluster works only with python 2.6 or later (but not python 3.X).\n\
               Please upgrate your version of python.')

import os
import optparse

# Get the parent directory (mg root) of the script real path (bin)
# and add it to the current PYTHONPATH

root_path = os.path.split(os.path.dirname(os.path.realpath( __file__ )))[0]
sys.path.insert(0, root_path)


# Write out nice usage message if called with -h or --help
import subprocess

# Check if optimize mode is (and should be) activated
#if __debug__ and not options.debug and \
#    (not os.path.exists(os.path.join(root_path, 'bin','create_release.py')) or options.web):
#        os.system('%s -O %s' % (sys.executable, ' '.join(sys.argv)))
#        sys.exit()

import logging
import logging.config

try: 
    import readline
except ImportError:
    try:
        import pyreadline as readline
    except:
        print "For tab completion and history, install module readline."
else:
    import rlcompleter

    if 'r261:67515' in sys.version and  'GCC 4.2.1 (Apple Inc. build 5646)' in sys.version:
        readline.parse_and_bind("bind ^I rl_complete")
        readline.__doc__ = 'libedit'  
    
    elif hasattr(readline, '__doc__'):
        if 'libedit' not in readline.__doc__:
            readline.parse_and_bind("tab: complete")
        else:
            readline.parse_and_bind("bind ^I rl_complete")
    else:
        readline.__doc__ = 'GNU'
        readline.parse_and_bind("tab: complete")
        

try:
   import psyco
   psyco.full()
except:
   pass

import pythoncode.helaconia_interface as interface


try:
    cmd_line = interface.HELACOniaCmd()
    cmd_line.cmdloop()
except KeyboardInterrupt:
    print 'quit on KeyboardInterrupt' 
    pass

    
